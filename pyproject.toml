[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "thales-dpod-mcp-server"
version = "1.0.0"
description = "Modularized MCP server for Thales DPoD with organized tool categories"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Sanyam Bassi"}
]
maintainers = [
    {name = "Sanyam Bassi"}
]
keywords = [
    "mcp",
    "model-context-protocol", 
    "thales",
    "dpod",
    "cloud",
    "api",
    "fastmcp"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: System :: Distributed Computing"
]
requires-python = ">=3.10"
dependencies = [
    "fastmcp>=2.11.3",
    "httpx>=0.28.1",
    "python-dotenv>=1.0.1",
    "pydantic>=2.10.2",
    "PyJWT>=2.8.0",
    "beautifulsoup4>=4.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.24.0"
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0"
]

[project.urls]
Homepage = "https://github.com/thales/dpod-mcp-server"
Documentation = "https://github.com/thales/dpod-mcp-server/blob/main/README.md"
Repository = "https://github.com/thales/dpod-mcp-server"
Issues = "https://github.com/thales/dpod-mcp-server/issues"

[project.scripts]
thales-dpod-mcp = "src.dpod_mcp_server.main:main"
dpod-mcp-server = "src.dpod_mcp_server.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md", 
    "/LICENSE",
    "/requirements.txt"
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration  
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["thales_dpod_mcp_server"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

# Coverage configuration
[tool.coverage.run]
source = ["thales_dpod_mcp_server"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "dotenv.*",
    "fastmcp.*"
]
ignore_missing_imports = true

# Ruff configuration (alternative to flake8)
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]
